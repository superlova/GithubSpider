{"sha": "133a9711dd63a2bdaf3930f837247c399743fecc", "node_id": "MDY6Q29tbWl0NDU3MTcyNTA6MTMzYTk3MTFkZDYzYTJiZGFmMzkzMGY4MzcyNDdjMzk5NzQzZmVjYw==", "commit": {"author": {"name": "Jacques Pienaar", "email": "jpienaar@google.com", "date": "2021-01-08T22:04:58Z"}, "committer": {"name": "TensorFlower Gardener", "email": "gardener@tensorflow.org", "date": "2021-01-08T22:10:33Z"}, "message": "Use flib of attached context.\n\nStacks not part of proto. Moved to TF2 only test and run with TF2_BEHAVIOR env set.\n\nPiperOrigin-RevId: 350832704\nChange-Id: I342bdf724a9842e9f1b3c49095d8db1ec0c56076", "tree": {"sha": "287e514d3884bac49f909e93df5c6610ae21cb98", "url": "https://api.github.com/repos/tensorflow/tensorflow/git/trees/287e514d3884bac49f909e93df5c6610ae21cb98"}, "url": "https://api.github.com/repos/tensorflow/tensorflow/git/commits/133a9711dd63a2bdaf3930f837247c399743fecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/tensorflow/tensorflow/commits/133a9711dd63a2bdaf3930f837247c399743fecc", "html_url": "https://github.com/tensorflow/tensorflow/commit/133a9711dd63a2bdaf3930f837247c399743fecc", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/commits/133a9711dd63a2bdaf3930f837247c399743fecc/comments", "author": {"login": "jpienaar", "id": 706766, "node_id": "MDQ6VXNlcjcwNjc2Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/706766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpienaar", "html_url": "https://github.com/jpienaar", "followers_url": "https://api.github.com/users/jpienaar/followers", "following_url": "https://api.github.com/users/jpienaar/following{/other_user}", "gists_url": "https://api.github.com/users/jpienaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpienaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpienaar/subscriptions", "organizations_url": "https://api.github.com/users/jpienaar/orgs", "repos_url": "https://api.github.com/users/jpienaar/repos", "events_url": "https://api.github.com/users/jpienaar/events{/privacy}", "received_events_url": "https://api.github.com/users/jpienaar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tensorflower-gardener", "id": 17151892, "node_id": "MDQ6VXNlcjE3MTUxODky", "avatar_url": "https://avatars0.githubusercontent.com/u/17151892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflower-gardener", "html_url": "https://github.com/tensorflower-gardener", "followers_url": "https://api.github.com/users/tensorflower-gardener/followers", "following_url": "https://api.github.com/users/tensorflower-gardener/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflower-gardener/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflower-gardener/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflower-gardener/subscriptions", "organizations_url": "https://api.github.com/users/tensorflower-gardener/orgs", "repos_url": "https://api.github.com/users/tensorflower-gardener/repos", "events_url": "https://api.github.com/users/tensorflower-gardener/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflower-gardener/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b861654b1645f7a8123d954fd2bff3090aa92022", "url": "https://api.github.com/repos/tensorflow/tensorflow/commits/b861654b1645f7a8123d954fd2bff3090aa92022", "html_url": "https://github.com/tensorflow/tensorflow/commit/b861654b1645f7a8123d954fd2bff3090aa92022"}], "stats": {"total": 124, "additions": 93, "deletions": 31}, "files": [{"sha": "77fa608898e5dd15833bbf1344e6ff8697c6b974", "filename": "tensorflow/compiler/mlir/python/BUILD", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/tensorflow/tensorflow/blob/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/compiler/mlir/python/BUILD", "raw_url": "https://github.com/tensorflow/tensorflow/raw/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/compiler/mlir/python/BUILD", "contents_url": "https://api.github.com/repos/tensorflow/tensorflow/contents/tensorflow/compiler/mlir/python/BUILD?ref=133a9711dd63a2bdaf3930f837247c399743fecc", "patch": "@@ -11,6 +11,8 @@ cc_library(\n     srcs = [\"mlir.cc\"],\n     hdrs = [\"mlir.h\"],\n     deps = [\n+        \"//tensorflow/c/eager:c_api\",\n+        \"//tensorflow/c/eager:tfe_context_internal\",\n         \"//tensorflow/c:tf_status\",\n         \"//tensorflow/c:tf_status_helper\",\n         \"//tensorflow/compiler/mlir/tensorflow\",\n@@ -41,6 +43,7 @@ cc_library(\n         \"@llvm-project//mlir:Pass\",\n         \"@llvm-project//mlir:AllPassesAndDialectsNoRegistration\",\n         \"//tensorflow/compiler/mlir/tensorflow:translate_lib\",\n+        \"//tensorflow/core/common_runtime/eager:context\",\n         \"//tensorflow/core/common_runtime:core_cpu_base_no_ops\",\n         \"//tensorflow/core:framework\",\n         \"//tensorflow/core:protos_all_cc\","}, {"sha": "71f499a315a447c15c1a73153f5381e58d09297f", "filename": "tensorflow/compiler/mlir/python/mlir.cc", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/tensorflow/tensorflow/blob/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/compiler/mlir/python/mlir.cc", "raw_url": "https://github.com/tensorflow/tensorflow/raw/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/compiler/mlir/python/mlir.cc", "contents_url": "https://api.github.com/repos/tensorflow/tensorflow/contents/tensorflow/compiler/mlir/python/mlir.cc?ref=133a9711dd63a2bdaf3930f837247c399743fecc", "patch": "@@ -23,6 +23,8 @@ limitations under the License.\n #include \"mlir/Parser.h\"  // from @llvm-project\n #include \"mlir/Pass/PassManager.h\"  // from @llvm-project\n #include \"mlir/Pass/PassRegistry.h\"  // from @llvm-project\n+#include \"tensorflow/c/eager/c_api.h\"\n+#include \"tensorflow/c/eager/tfe_context_internal.h\"\n #include \"tensorflow/c/tf_status.h\"\n #include \"tensorflow/c/tf_status_helper.h\"\n #include \"tensorflow/compiler/mlir/tensorflow/dialect_registration.h\"\n@@ -32,6 +34,7 @@ limitations under the License.\n #include \"tensorflow/compiler/mlir/tensorflow/translate/tf_mlir_translate.h\"\n #include \"tensorflow/compiler/mlir/tensorflow/utils/error_util.h\"\n #include \"tensorflow/compiler/mlir/tensorflow/utils/import_utils.h\"\n+#include \"tensorflow/core/common_runtime/eager/context.h\"\n #include \"tensorflow/core/common_runtime/function_body.h\"\n #include \"tensorflow/core/common_runtime/function_def_utils.h\"\n #include \"tensorflow/core/framework/function.h\"\n@@ -91,33 +94,19 @@ std::string ImportGraphDef(const std::string &proto,\n }\n \n std::string ImportFunction(const std::string &functiondef_proto,\n-                           const std::string &functiondef_library_proto,\n                            const std::string &pass_pipeline,\n-                           bool show_debug_info, TF_Status *status) {\n+                           bool show_debug_info, TFE_Context *tfe_context,\n+                           TF_Status *status) {\n   FunctionDef functiondef;\n   auto s = tensorflow::LoadProtoFromBuffer(functiondef_proto, &functiondef);\n   if (!s.ok()) {\n     Set_TF_Status_from_Status(status, s);\n     return \"// error\";\n   }\n \n-  FunctionDefLibrary fdef_lib;\n-  s = tensorflow::LoadProtoFromBuffer(functiondef_library_proto, &fdef_lib);\n-  if (!s.ok()) {\n-    Set_TF_Status_from_Status(status, s);\n-    return \"// error\";\n-  }\n-\n   const std::string &function_name = functiondef.signature().name();\n-\n-  FunctionLibraryDefinition flib_def(OpRegistry::Global(), fdef_lib);\n-  s = flib_def.AddFunctionDef(functiondef,\n-                              flib_def.GetStackTraces(function_name));\n-  if (!s.ok()) {\n-    Set_TF_Status_from_Status(status, s);\n-    return \"// error\";\n-  }\n-\n+  EagerContext *cpp_context = ContextFromInterface(unwrap(tfe_context));\n+  FunctionLibraryDefinition &flib_def = *cpp_context->FuncLibDef();\n   const tensorflow::FunctionDef *fdef = flib_def.Find(function_name);\n   if (fdef == nullptr) {\n     s = tensorflow::errors::NotFound(\"Cannot find function \", function_name);"}, {"sha": "54a0b96cb16f2df964880d015e010ded47cba146", "filename": "tensorflow/compiler/mlir/python/mlir.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/tensorflow/tensorflow/blob/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/compiler/mlir/python/mlir.h", "raw_url": "https://github.com/tensorflow/tensorflow/raw/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/compiler/mlir/python/mlir.h", "contents_url": "https://api.github.com/repos/tensorflow/tensorflow/contents/tensorflow/compiler/mlir/python/mlir.h?ref=133a9711dd63a2bdaf3930f837247c399743fecc", "patch": "@@ -20,6 +20,7 @@ limitations under the License.\n \n #include <string>\n \n+#include \"tensorflow/c/eager/c_api.h\"\n #include \"tensorflow/c/tf_status.h\"\n \n namespace tensorflow {\n@@ -34,15 +35,14 @@ std::string ImportGraphDef(const std::string &proto,\n                            bool show_debug_info, TF_Status *status);\n \n // Simple wrapper to support tf.mlir.experimental.convert_function.\n-// Load FunctionDef and FunctionDefLibrary (binary or textual proto format),\n-// convert to MLIR, and (optionally) optimize the module before returning it as\n-// a string.\n+// Load FunctionDef (binary or textual proto format), convert to MLIR, and\n+// (optionally) optimize the module before returning it as a string.\n // This is an early experimental API, ideally we should return a wrapper object\n // around a Python binding to the MLIR module.\n std::string ImportFunction(const std::string &functiondef_proto,\n-                           const std::string &functiondef_library_proto,\n                            const std::string &pass_pipeline,\n-                           bool show_debug_info, TF_Status *status);\n+                           bool show_debug_info, TFE_Context *context,\n+                           TF_Status *status);\n \n // Load a SavedModel and return a textual MLIR string corresponding to it.\n //"}, {"sha": "44e2bb921326fe208b051cfe48ea686195dcd709", "filename": "tensorflow/python/BUILD", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/tensorflow/tensorflow/blob/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/python/BUILD", "raw_url": "https://github.com/tensorflow/tensorflow/raw/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/python/BUILD", "contents_url": "https://api.github.com/repos/tensorflow/tensorflow/contents/tensorflow/python/BUILD?ref=133a9711dd63a2bdaf3930f837247c399743fecc", "patch": "@@ -6597,26 +6597,59 @@ py_library(\n     ],\n )\n \n+# TODO(jpienaar): These deps can be reduced, consider moving getting the context to Python side to reduce need for TFE deps.\n tf_python_pybind_extension(\n     name = \"_pywrap_mlir\",\n     srcs = [\"mlir_wrapper.cc\"],\n     hdrs = [\n         \"//tensorflow/c:headers\",\n         \"//tensorflow/c/eager:headers\",\n+        \"//tensorflow/c/eager:pywrap_required_hdrs\",\n+        \"//tensorflow/c/experimental/ops:pywrap_required_hdrs\",\n         \"//tensorflow/compiler/mlir/python:pywrap_mlir_hdrs\",\n+        \"//tensorflow/core/common_runtime/eager:pywrap_required_hdrs\",\n+        \"//tensorflow/core/distributed_runtime:pywrap_required_hdrs\",\n+        \"//tensorflow/core/distributed_runtime/eager:pywrap_required_hdrs\",\n+        \"//tensorflow/python/eager:pywrap_required_hdrs\",\n+        \"//tensorflow/python/lib/core:numpy_hdr\",\n+        \"//tensorflow/python/lib/core:py_exception_registry_hdr\",\n         \"//tensorflow/python/lib/core:safe_ptr_hdr\",\n+        \"//tensorflow/python/util:util_hdr\",\n     ],\n     module_name = \"_pywrap_mlir\",\n     deps = [\n-        \"//tensorflow/core:protos_all_cc\",\n-        \"//tensorflow/core/platform:status\",\n+        \"//tensorflow/python/lib/core:safe_pyobject_ptr\",\n         \"//tensorflow/python/lib/core:pybind11_lib\",\n+        \"//third_party/py/numpy:headers\",\n         \"//tensorflow/python/lib/core:pybind11_status\",\n-        \"//tensorflow/python/lib/core:safe_pyobject_ptr\",\n-        \"//third_party/python_runtime:headers\",\n-        \"@com_google_absl//absl/container:fixed_array\",\n+        \"//tensorflow/core/framework:pywrap_required_hdrs\",\n+        \"@com_google_absl//absl/container:flat_hash_map\",\n+        \"@com_google_absl//absl/hash\",\n+        \"@com_google_absl//absl/memory\",\n+        \"@com_google_absl//absl/strings\",\n+        \"@com_google_absl//absl/strings:str_format\",\n+        \"@com_google_absl//absl/types:optional\",\n+        \"//tensorflow/c:pywrap_required_hdrs\",\n         \"@pybind11\",\n-    ],\n+        \"//third_party/python_runtime:headers\",\n+        \"//tensorflow/c/eager:tfe_tensorhandle_internal_hdrs_only\",\n+        \"//tensorflow/core/common_runtime:core_cpu_headers_lib\",\n+        \"//tensorflow/core:framework_headers_lib\",\n+        \"//tensorflow/core:lib_headers_for_pybind\",\n+        \"//tensorflow/core:protos_all_cc\",\n+        \"//tensorflow/core/platform\",\n+    ] + if_static(\n+        extra_deps = [\n+            \"//tensorflow/core/protobuf:eager_service_proto_cc\",\n+            \"//tensorflow/core/protobuf:master_proto_cc\",\n+            \"//tensorflow/core/protobuf:worker_proto_cc\",\n+        ],\n+        otherwise = [\n+            \"//tensorflow/core/protobuf:eager_service_proto_cc_headers_only\",\n+            \"//tensorflow/core/protobuf:master_proto_cc_headers_only\",\n+            \"//tensorflow/core/protobuf:worker_proto_cc_headers_only\",\n+        ],\n+    ),\n )\n \n cc_library("}, {"sha": "cb8ec5def350584e825d4023699ac0a51a02873f", "filename": "tensorflow/python/compiler/mlir/mlir_test.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/tensorflow/tensorflow/blob/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/python/compiler/mlir/mlir_test.py", "raw_url": "https://github.com/tensorflow/tensorflow/raw/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/python/compiler/mlir/mlir_test.py", "contents_url": "https://api.github.com/repos/tensorflow/tensorflow/contents/tensorflow/python/compiler/mlir/mlir_test.py?ref=133a9711dd63a2bdaf3930f837247c399743fecc", "patch": "@@ -23,6 +23,7 @@\n from tensorflow.python.framework import dtypes\n from tensorflow.python.framework import errors\n from tensorflow.python.framework import tensor_spec\n+from tensorflow.python.framework import test_util\n from tensorflow.python.ops import logging_ops\n from tensorflow.python.platform import test\n \n@@ -43,6 +44,7 @@ def testInvalidPbtxt(self):\n \n class MLIRConcreteFunctionImportTest(test.TestCase):\n \n+  @test_util.run_v2_only\n   def testImport(self):\n \n     @def_function.function\n@@ -55,6 +57,7 @@ def sqr(i):\n     self.assertRegex(mlir_module, r'func @.*sqr.*\\(')\n     self.assertRegex(mlir_module, r'loc\\(')\n \n+  @test_util.run_v2_only\n   def testImportWithCall(self):\n \n     @def_function.function\n@@ -71,6 +74,7 @@ def caller(i):\n     self.assertRegex(mlir_module, r'func @.*caller.*\\(')\n     self.assertRegex(mlir_module, r'func private @.*callee.*\\(')\n \n+  @test_util.run_v2_only\n   def testImportWithControlRet(self):\n \n     @def_function.function"}, {"sha": "fe291ba44e1f6604b4a4c61565c65ee70779d259", "filename": "tensorflow/python/mlir_wrapper.cc", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/tensorflow/tensorflow/blob/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/python/mlir_wrapper.cc", "raw_url": "https://github.com/tensorflow/tensorflow/raw/133a9711dd63a2bdaf3930f837247c399743fecc/tensorflow/python/mlir_wrapper.cc", "contents_url": "https://api.github.com/repos/tensorflow/tensorflow/contents/tensorflow/python/mlir_wrapper.cc?ref=133a9711dd63a2bdaf3930f837247c399743fecc", "patch": "@@ -14,12 +14,43 @@ limitations under the License.\n ==============================================================================*/\n \n #include \"pybind11/pybind11.h\"\n+#include \"pybind11/pytypes.h\"\n #include \"tensorflow/c/tf_status.h\"\n #include \"tensorflow/compiler/mlir/python/mlir.h\"\n+#include \"tensorflow/core/platform/strcat.h\"\n+#include \"tensorflow/python/eager/pywrap_tfe.h\"\n #include \"tensorflow/python/lib/core/pybind11_lib.h\"\n #include \"tensorflow/python/lib/core/pybind11_status.h\"\n #include \"tensorflow/python/lib/core/safe_ptr.h\"\n \n+namespace {\n+TFE_Context *GetContextHandle(PyObject *py_context) {\n+  tensorflow::Safe_PyObjectPtr py_context_handle(\n+      PyObject_GetAttrString(py_context, \"_handle\"));\n+  if (py_context_handle == nullptr) {\n+    // Current Python code makes sure this never happens. If it does, or\n+    // becomes hard to maintain, we can call the ensure_initialized() method\n+    // here.\n+    PyErr_SetString(PyExc_TypeError,\n+                    \"Expected context to have a `_handle` attribute but it did \"\n+                    \"not. Was eager Context initialized?\");\n+    return nullptr;\n+  }\n+\n+  auto *ctx = reinterpret_cast<TFE_Context *>(\n+      PyCapsule_GetPointer(py_context_handle.get(), nullptr));\n+  if (ctx == nullptr) {\n+    PyErr_SetString(PyExc_TypeError,\n+                    tensorflow::strings::StrCat(\n+                        \"Expected context._handle to contain a PyCapsule \"\n+                        \"encoded pointer to TFE_Context. Got \",\n+                        Py_TYPE(py_context_handle.get())->tp_name)\n+                        .c_str());\n+  }\n+  return ctx;\n+}\n+}  // namespace\n+\n PYBIND11_MODULE(_pywrap_mlir, m) {\n   m.def(\"ImportGraphDef\",\n         [](const std::string &graphdef, const std::string &pass_pipeline,\n@@ -38,9 +69,11 @@ PYBIND11_MODULE(_pywrap_mlir, m) {\n                              bool show_debug_info) {\n     tensorflow::Safe_TF_StatusPtr status =\n         tensorflow::make_safe(TF_NewStatus());\n+    py::object obj = py::reinterpret_steal<py::object>(GetPyEagerContext());\n+    TFE_Context *context = GetContextHandle(obj.ptr());\n+    if (!context) throw py::error_already_set();\n     std::string output = tensorflow::ImportFunction(\n-        functiondef, functiondef_library, pass_pipeline, show_debug_info,\n-        status.get());\n+        functiondef, pass_pipeline, show_debug_info, context, status.get());\n     tensorflow::MaybeRaiseRegisteredFromTFStatus(status.get());\n     return output;\n   });"}]}